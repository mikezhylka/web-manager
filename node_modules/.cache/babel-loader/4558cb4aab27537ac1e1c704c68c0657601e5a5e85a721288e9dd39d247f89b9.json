{"ast":null,"code":"// Mockowany URL API (dla porządku)\nconst API_URL = 'http://localhost:8000';\n\n// Mockowanie funkcji login\nexport const login = async credentials => {\n  console.log('Mock login:', credentials);\n  if (credentials.email === 'test@example.com' && credentials.password === 'password') {\n    return {\n      success: true,\n      user: {\n        id: 1,\n        name: 'Testowy Użytkownik',\n        email: credentials.email\n      }\n    };\n  } else {\n    return {\n      success: false,\n      message: 'Nieprawidłowe dane logowania'\n    };\n  }\n};\n\n// Mockowanie funkcji fetchTasks\nexport const fetchTasks = async () => {\n  console.log('Mock fetch tasks');\n  return [{\n    id: 1,\n    title: 'Pierwsze zadanie',\n    completed: false\n  }, {\n    id: 2,\n    title: 'Drugie zadanie',\n    completed: true\n  }, {\n    id: 3,\n    title: 'Trzecie zadanie',\n    completed: false\n  }];\n};\n\n// Mockowanie funkcji fetchTaskDetails\nexport const fetchTaskDetails = async id => {\n  console.log('Mock fetch task details:', id);\n  return {\n    id,\n    title: `Zadanie ${id}`,\n    description: 'To jest szczegółowy opis zadania.',\n    completed: id % 2 === 0 // Co drugie zadanie ustawione jako zakończone\n  };\n};\n// Dodaj zadanie\nexport const createTask = async taskData => {\n  console.log('Mock create task:', taskData);\n  return {\n    success: true,\n    task: {\n      id: Math.floor(Math.random() * 1000),\n      // Losowe ID\n      ...taskData,\n      completed: false\n    }\n  };\n};\n\n// Aktualizuj zadanie\nexport const updateTask = async (id, taskData) => {\n  console.log('Mock update task:', id, taskData);\n  return {\n    success: true,\n    task: {\n      id,\n      ...taskData\n    }\n  };\n};\n\n// Usuń zadanie\nexport const deleteTask = async id => {\n  console.log('Mock delete task:', id);\n  return {\n    success: true,\n    id\n  };\n};\nexport const requestPasswordReset = async email => {\n  console.log('Mock request password reset:', email);\n  // Symulacja sukcesu/resetu hasła\n  if (email === 'test@example.com') {\n    return {\n      success: true,\n      message: 'E-mail wysłany!'\n    };\n  } else {\n    return {\n      success: false,\n      message: 'Nie znaleziono konta z tym adresem e-mail.'\n    };\n  }\n};\n// Mockowanie funkcji pobierania szczegółów użytkownika\nexport const getUserDetails = async () => {\n  console.log('Mock get user details');\n  return {\n    name: 'Wielgas Ku',\n    position: 'Developer'\n  };\n};\n\n// Mockowanie funkcji aktualizacji szczegółów użytkownika\nexport const updateUserDetails = async userDetails => {\n  console.log('Mock update user details:', userDetails);\n  return {\n    success: true\n  }; // Symulacja sukcesu\n};","map":{"version":3,"names":["API_URL","login","credentials","console","log","email","password","success","user","id","name","message","fetchTasks","title","completed","fetchTaskDetails","description","createTask","taskData","task","Math","floor","random","updateTask","deleteTask","requestPasswordReset","getUserDetails","position","updateUserDetails","userDetails"],"sources":["C:/Users/ja/projektprojekt/superprojekt/src/services/Api.js"],"sourcesContent":["// Mockowany URL API (dla porządku)\r\nconst API_URL = 'http://localhost:8000';\r\n\r\n// Mockowanie funkcji login\r\nexport const login = async (credentials) => {\r\n  console.log('Mock login:', credentials);\r\n  if (credentials.email === 'test@example.com' && credentials.password === 'password') {\r\n    return {\r\n      success: true,\r\n      user: {\r\n        id: 1,\r\n        name: 'Testowy Użytkownik',\r\n        email: credentials.email,\r\n      },\r\n    };\r\n  } else {\r\n    return {\r\n      success: false,\r\n      message: 'Nieprawidłowe dane logowania',\r\n    };\r\n  }\r\n};\r\n\r\n// Mockowanie funkcji fetchTasks\r\nexport const fetchTasks = async () => {\r\n  console.log('Mock fetch tasks');\r\n  return [\r\n    { id: 1, title: 'Pierwsze zadanie', completed: false },\r\n    { id: 2, title: 'Drugie zadanie', completed: true },\r\n    { id: 3, title: 'Trzecie zadanie', completed: false },\r\n  ];\r\n};\r\n\r\n// Mockowanie funkcji fetchTaskDetails\r\nexport const fetchTaskDetails = async (id) => {\r\n  console.log('Mock fetch task details:', id);\r\n  return {\r\n    id,\r\n    title: `Zadanie ${id}`,\r\n    description: 'To jest szczegółowy opis zadania.',\r\n    completed: id % 2 === 0, // Co drugie zadanie ustawione jako zakończone\r\n  };\r\n};\r\n// Dodaj zadanie\r\nexport const createTask = async (taskData) => {\r\n    console.log('Mock create task:', taskData);\r\n    return {\r\n      success: true,\r\n      task: {\r\n        id: Math.floor(Math.random() * 1000), // Losowe ID\r\n        ...taskData,\r\n        completed: false,\r\n      },\r\n    };\r\n  };\r\n  \r\n  // Aktualizuj zadanie\r\n  export const updateTask = async (id, taskData) => {\r\n    console.log('Mock update task:', id, taskData);\r\n    return {\r\n      success: true,\r\n      task: {\r\n        id,\r\n        ...taskData,\r\n      },\r\n    };\r\n  };\r\n  \r\n  // Usuń zadanie\r\n  export const deleteTask = async (id) => {\r\n    console.log('Mock delete task:', id);\r\n    return {\r\n      success: true,\r\n      id,\r\n    };\r\n  };\r\n  export const requestPasswordReset = async (email) => {\r\n    console.log('Mock request password reset:', email);\r\n    // Symulacja sukcesu/resetu hasła\r\n    if (email === 'test@example.com') {\r\n      return { success: true, message: 'E-mail wysłany!' };\r\n    } else {\r\n      return { success: false, message: 'Nie znaleziono konta z tym adresem e-mail.' };\r\n    }\r\n  };\r\n  // Mockowanie funkcji pobierania szczegółów użytkownika\r\nexport const getUserDetails = async () => {\r\n    console.log('Mock get user details');\r\n    return {\r\n      name: 'Wielgas Ku',\r\n      position: 'Developer',\r\n    };\r\n  };\r\n  \r\n  // Mockowanie funkcji aktualizacji szczegółów użytkownika\r\n  export const updateUserDetails = async (userDetails) => {\r\n    console.log('Mock update user details:', userDetails);\r\n    return { success: true }; // Symulacja sukcesu\r\n  };"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,uBAAuB;;AAEvC;AACA,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;EAC1CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,WAAW,CAAC;EACvC,IAAIA,WAAW,CAACG,KAAK,KAAK,kBAAkB,IAAIH,WAAW,CAACI,QAAQ,KAAK,UAAU,EAAE;IACnF,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACJC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,oBAAoB;QAC1BL,KAAK,EAAEH,WAAW,CAACG;MACrB;IACF,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACLE,OAAO,EAAE,KAAK;MACdI,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpCT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,OAAO,CACL;IAAEK,EAAE,EAAE,CAAC;IAAEI,KAAK,EAAE,kBAAkB;IAAEC,SAAS,EAAE;EAAM,CAAC,EACtD;IAAEL,EAAE,EAAE,CAAC;IAAEI,KAAK,EAAE,gBAAgB;IAAEC,SAAS,EAAE;EAAK,CAAC,EACnD;IAAEL,EAAE,EAAE,CAAC;IAAEI,KAAK,EAAE,iBAAiB;IAAEC,SAAS,EAAE;EAAM,CAAC,CACtD;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAON,EAAE,IAAK;EAC5CN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEK,EAAE,CAAC;EAC3C,OAAO;IACLA,EAAE;IACFI,KAAK,EAAE,WAAWJ,EAAE,EAAE;IACtBO,WAAW,EAAE,mCAAmC;IAChDF,SAAS,EAAEL,EAAE,GAAG,CAAC,KAAK,CAAC,CAAE;EAC3B,CAAC;AACH,CAAC;AACD;AACA,OAAO,MAAMQ,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC1Cf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,QAAQ,CAAC;EAC1C,OAAO;IACLX,OAAO,EAAE,IAAI;IACbY,IAAI,EAAE;MACJV,EAAE,EAAEW,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;MAAE;MACtC,GAAGJ,QAAQ;MACXJ,SAAS,EAAE;IACb;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOd,EAAE,EAAES,QAAQ,KAAK;EAChDf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEK,EAAE,EAAES,QAAQ,CAAC;EAC9C,OAAO;IACLX,OAAO,EAAE,IAAI;IACbY,IAAI,EAAE;MACJV,EAAE;MACF,GAAGS;IACL;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAG,MAAOf,EAAE,IAAK;EACtCN,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEK,EAAE,CAAC;EACpC,OAAO;IACLF,OAAO,EAAE,IAAI;IACbE;EACF,CAAC;AACH,CAAC;AACD,OAAO,MAAMgB,oBAAoB,GAAG,MAAOpB,KAAK,IAAK;EACnDF,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,KAAK,CAAC;EAClD;EACA,IAAIA,KAAK,KAAK,kBAAkB,EAAE;IAChC,OAAO;MAAEE,OAAO,EAAE,IAAI;MAAEI,OAAO,EAAE;IAAkB,CAAC;EACtD,CAAC,MAAM;IACL,OAAO;MAAEJ,OAAO,EAAE,KAAK;MAAEI,OAAO,EAAE;IAA6C,CAAC;EAClF;AACF,CAAC;AACD;AACF,OAAO,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtCvB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC,OAAO;IACLM,IAAI,EAAE,YAAY;IAClBiB,QAAQ,EAAE;EACZ,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,WAAW,IAAK;EACtD1B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEyB,WAAW,CAAC;EACrD,OAAO;IAAEtB,OAAO,EAAE;EAAK,CAAC,CAAC,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}